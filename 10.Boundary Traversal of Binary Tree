/************************************************************

    Following is the Binary Tree node structure:

    template <typename T>
    class TreeNode
    {
    public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data)
        {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode()
        {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/

void LeftTraversal(TreeNode<int>*root,vector<int>&v){
    if(root==NULL) return;
    while(root!=NULL){
        if(root->left!=NULL || root->right!=NULL)
         v.push_back(root->data);
        if(root->left!=NULL){
            root=root->left;
        }
        else{
            root=root->right;
        }
    }
}

void RightTraversal(TreeNode<int>*root,vector<int>&v){
    if(root==NULL) return;
    vector<int>x;
    while(root!=NULL){
        if(root->left!=NULL || root->right!=NULL)
         x.push_back(root->data);
        if(root->right!=NULL){
            root=root->right;
        }
        else{
            root=root->left;
        }
    }
    for(int i=x.size()-1;i>=0;i--){
        v.push_back(x[i]);
    }
}
 void LeafNodes(TreeNode<int>*root,vector<int>&v){
     if(!root) return;
     if(root->left==NULL && root->right==NULL) {v.push_back(root->data);return;}
     LeafNodes(root->left,v);
     LeafNodes(root->right,v);
 } 
vector<int> traverseBoundary(TreeNode<int> *root)
{
	vector<int>ans;
    ans.push_back(root->data);
    LeftTraversal(root->left,ans);
    LeafNodes(root,ans);
    RightTraversal(root->right,ans);
    return ans;
}
