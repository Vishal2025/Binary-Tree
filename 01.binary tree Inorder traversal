/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
 //    recursive approach for inorder
    void inorderhelper(TreeNode* root, vector<int>& ans) {
        if (root == NULL) return;
        
        inorderhelper(root->left, ans);
        ans.push_back(root->val);
        inorderhelper(root->right, ans);
    }
    vector<int> inorderTraversal(TreeNode* root) {
        // iterative inorder traversal
        if(root==NULL)
        return {};

        vector<int>v;
        stack<TreeNode*>s;
        TreeNode *node=root;

        while(true) {

         if(node!=NULL){
             s.push(node);
             node=node->left;
         } 

         else{
             if(s.empty()==true)
             break; 
             node=s.top();
             v.push_back(node->val);
             s.pop();
             node=node->right;
             
         }
      }
      return v;
    }
};
